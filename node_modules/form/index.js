var Form = function(req) {

  this.getContent = '';
  this.postData = req.body;
  this.fromUrl = req.originalUrl;

  if(Object.getOwnPropertyNames(req.body).length === 0){
    this.error = true;
  } else{
    this.error = false;
  }

  this.globalErrMsg = '';
  
};


// Form open
Form.prototype.open = function(attrs) {
  if(typeof attrs !== 'object'){
    this.getContent = '<form method="post" action="'+ this.fromUrl+'" accept-charset="utf-8">';
  } else{
   this.getContent = '<form '+jsonToStringAttrs(attrs)+' accept-charset="utf-8">';
  }
};


Form.prototype.close = function() {
  this.getContent = this.getContent + '</form>';
};


Form.prototype.label = function(lname, lfor, attrs) {
  this.getContent = this.getContent + '<label for="'+lfor+'" '+jsonToStringAttrs(attrs)+'>'+lname+'</label>';
};




Form.prototype.text = function(name, attrs, validations, value) {
  
  
  
  
  
  //+if(form.hasOwnProperty("errorMsg"){
  

  this.getContent = this.getContent + '<input type="text" name="'+name+'"  value="'+ value+'" '+jsonToStringAttrs(attrs)+'>';
  
};



Form.prototype.pass = function(attrs) {

  var validate  = {};

  //if post validate - not setting password post value
  if(this.postData && this.postData.hasOwnProperty(attrs.name) && attrs.hasOwnProperty('validation')){
      
      validate  = validateInput(this.postData[attrs.name], attrs.validation);

  }

  var attHtml = getAttributesString(attrs, ['label', 'validation']);

  if(validate.hasOwnProperty('error') && validate.error){
    var html = '<div class="form-group has-error">';
  } else{
    var html = '<div class="form-group">';
  }

  html += ' <label class="control-label" for="'+attrs.name+'">'+attrs.label+'</label>';
  
  html += '<input type="password" '+attHtml+'>';
  if(validate.hasOwnProperty('error') && validate.error){
    this.error = true;
    html += ' <span class="help-block">'+validate.errMsg+'</span>';
  }
  
  html += '</div>';

  this.getContent = this.getContent + html;
};


Form.prototype.checkbox = function(attrs) {
  var input = '<label for="'+attrs.name+'"><input type="checkbox" name="'+attrs.name+'"> '+attrs.label+'</label>';
  this.getContent = this.getContent + input;
};


Form.prototype.radio = function(attrs) {
  var input = '<label for="'+attrs.name+'"><input type="radio" name="'+attrs.name+'"> '+attrs.label+'</label>';
  this.getContent = this.getContent + input;
};


Form.prototype.select = function(attrs) {
  var input = '<label for="'+attrs.name+'"><input type="radio" name="'+attrs.name+'"> '+attrs.label+'</label>';
  this.getContent = this.getContent + input;
};


Form.prototype.html = function(html) {
  
  this.getContent = this.getContent + html;
};






Form.prototype.submit = function(attrs) {

  var att;
  for(var attr in attrs) {
   //console.log(attr);
   att += ' '+attr+'="'+attrs[attr]+'"';
  }


  var input = '<div class="form-group"><input type="submit" '+att+' /></div>';
  this.getContent = this.getContent + input;
};



Form.prototype.setError = function(errMsg) {

  this.error = true;

  this.globalErrMsg = errMsg;

};




//*  Helper function *//

function jsonToStringAttrs(attrs){
  
 
  
  var att = '';
  
  if(typeof attrs == 'object'){
  
  for (key in attrs) {
    if (attrs.hasOwnProperty(key)) {
        att += ' '+key+'="'+attrs[key]+'"';
    }
  }  
  
  }
  
  return att;

}

function validateInput(value , validations){

  var validator = require('validator');


  for (var i in validations) {
    
    //console.log(validations[i].rule);

    if(!validator[validations[i].rule](value)){  /// cteate dynamic functopn
        return {error:true, errMsg:validations[i].error};
        break;
    }


  }


  return {error:false};

  //var res = validations.split("|");





}


function getAttributesString(attrs, ignoreArray) {


var attHtml = '';
  for(var attr in attrs) {
   if(!contains(attr, ignoreArray)){
    attHtml += ' '+attr+'="'+attrs[attr]+'"';
   }
  }

return attHtml;

}





function contains(needle, array) {
    var i = array.length;
    while (i--) {
       if (array[i] === needle) {
           return true;
       }
    }
    return false;
}




module.exports = Form;